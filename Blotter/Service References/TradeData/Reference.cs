//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blotter.TradeData {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AttemptingToUpdateOldVersionOfTrade", Namespace="http://schemas.datacontract.org/2004/07/Blotter.Service")]
    [System.SerializableAttribute()]
    public partial class AttemptingToUpdateOldVersionOfTrade : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradeDoesNotExist", Namespace="http://schemas.datacontract.org/2004/07/Blotter.Service")]
    [System.SerializableAttribute()]
    public partial class TradeDoesNotExist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TradeData.ITradeService", CallbackContract=typeof(Blotter.TradeData.ITradeServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITradeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/AddUpdateTrade", ReplyAction="http://tempuri.org/ITradeService/AddUpdateTradeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Blotter.TradeData.AttemptingToUpdateOldVersionOfTrade), Action="http://tempuri.org/ITradeService/AddUpdateTradeAttemptingToUpdateOldVersionOfTrad" +
            "eFault", Name="AttemptingToUpdateOldVersionOfTrade", Namespace="http://schemas.datacontract.org/2004/07/Blotter.Service")]
        void AddUpdateTrade(Blotter.Model.Trade trade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/AddUpdateTrade", ReplyAction="http://tempuri.org/ITradeService/AddUpdateTradeResponse")]
        System.Threading.Tasks.Task AddUpdateTradeAsync(Blotter.Model.Trade trade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetHistoryForTrade", ReplyAction="http://tempuri.org/ITradeService/GetHistoryForTradeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Blotter.TradeData.TradeDoesNotExist), Action="http://tempuri.org/ITradeService/GetHistoryForTradeTradeDoesNotExistFault", Name="TradeDoesNotExist", Namespace="http://schemas.datacontract.org/2004/07/Blotter.Service")]
        Blotter.Model.Trade[] GetHistoryForTrade(string tradeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetHistoryForTrade", ReplyAction="http://tempuri.org/ITradeService/GetHistoryForTradeResponse")]
        System.Threading.Tasks.Task<Blotter.Model.Trade[]> GetHistoryForTradeAsync(string tradeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTrades", ReplyAction="http://tempuri.org/ITradeService/GetTradesResponse")]
        Blotter.Model.Trade[] GetTrades();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/GetTrades", ReplyAction="http://tempuri.org/ITradeService/GetTradesResponse")]
        System.Threading.Tasks.Task<Blotter.Model.Trade[]> GetTradesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Subscribe", ReplyAction="http://tempuri.org/ITradeService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITradeService/Subscribe", ReplyAction="http://tempuri.org/ITradeService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ITradeService/Unsubscribe", ReplyAction="http://tempuri.org/ITradeService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ITradeService/Unsubscribe", ReplyAction="http://tempuri.org/ITradeService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITradeServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITradeService/TradeUpdated")]
        void TradeUpdated(Blotter.Model.Trade t);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITradeServiceChannel : Blotter.TradeData.ITradeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TradeServiceClient : System.ServiceModel.DuplexClientBase<Blotter.TradeData.ITradeService>, Blotter.TradeData.ITradeService {
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TradeServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddUpdateTrade(Blotter.Model.Trade trade) {
            base.Channel.AddUpdateTrade(trade);
        }
        
        public System.Threading.Tasks.Task AddUpdateTradeAsync(Blotter.Model.Trade trade) {
            return base.Channel.AddUpdateTradeAsync(trade);
        }
        
        public Blotter.Model.Trade[] GetHistoryForTrade(string tradeId) {
            return base.Channel.GetHistoryForTrade(tradeId);
        }
        
        public System.Threading.Tasks.Task<Blotter.Model.Trade[]> GetHistoryForTradeAsync(string tradeId) {
            return base.Channel.GetHistoryForTradeAsync(tradeId);
        }
        
        public Blotter.Model.Trade[] GetTrades() {
            return base.Channel.GetTrades();
        }
        
        public System.Threading.Tasks.Task<Blotter.Model.Trade[]> GetTradesAsync() {
            return base.Channel.GetTradesAsync();
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
